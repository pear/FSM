<?php

require 'FSM.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-11 at 16:18:25.
 */
class FSMTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var FSM
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $payload = array();
        $this->object = new FSM('S1', $payload);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $dotFilename = 'output/test.dot';
        $pngFilename = 'output/test.png';
        $pngWatermarkFilename = 'output/test2.png';
        
        if (file_exists($dotFilename)) {
            unlink($dotFilename);
        }
        
        if (file_exists($pngFilename)) {
            unlink($pngFilename);
        }
        
        if (file_exists($pngWatermarkFilename)) {
            unlink($pngWatermarkFilename);
        }
    }

    /**
     * @covers FSM::__construct
     */
    public function testConstructor()
    {
        $this->assertInstanceOf('FSM', new FSM('S1', $payload));
    }

    /**
     * @covers FSM::hasState
     */
    public function testhasState()
    {
        $state1 = 'S1';
        $state2 = 'S2';
        
        $this->object->addState($state1);
        $this->assertTrue($this->object->hasState($state1));
        $this->assertFalse($this->object->hasState($state2));
    }

    /**
     * @covers FSM::hasState
     * @expectedException Exception
     */
    public function testhasStateNull()
    {
        $state1 = 'S1';
        $state2 = 'S2';
        
        $this->object->addState($state1);
        $this->assertTrue($this->object->hasState($state1));
        
        $this->setExpectedException('Exception');
        $this->object->hasState(NULL);
    }

    /**
     * @covers FSM::addState
     * @expectedException Exception
     */
    public function testAddState()
    {
        $state = 'S1';
        
        $this->assertAttributeEquals(array(), '_states', $this->object);
        
        $initalStates = $this->object->getStates();
        $this->object->addState($state);
        
        $this->assertAttributeNotEquals($initalStates, '_states', $this->object);
        $this->assertAttributeContains($state, '_states', $this->object);
        $this->assertAttributeContains($state, '_states', $this->object);
        
        $this->setExpectedException('Exception');
        $this->object->addState(NULL);
    }

    /**
     * @covers FSM::addState
     * @expectedException Exception
     */
    public function testAddStateException()
    {
        $this->setExpectedException('Exception');
        
        $state = 'S1';
        
        $this->assertAttributeEquals(array(), '_states', $this->object);
        
        $initalStates = $this->object->getStates();
        $this->object->addState($state);
        $this->object->addState($state);
    }

    /**
     * @covers FSM::addStates
     */
    public function testAddStates()
    {
        $states = array(
            'S1',
            'S2'
        );
        
        $this->assertAttributeEquals(array(), '_states', $this->object);
        
        $initalStates = $this->object->getStates();
        $this->object->addStates($states);
        
        $this->assertAttributeNotEquals($initalStates, '_states', $this->object);
        $this->assertAttributeEquals($states, '_states', $this->object);
    }

    /**
     * @covers FSM::getCurrentState
     */
    public function testGetCurrentState()
    {
        $state = 'S1';
        
        $this->object->addState($state);
        
        $this->assertEquals($state, $this->object->getCurrentState());
    }

    /**
     * @covers FSM::setCurrentState
     */
    public function testSetCurrentState()
    {
        $states = array(
            'S1',
            'S2'
        );
        
        $this->object->addStates($states);
        $this->object->setCurrentState($states[1]);
        
        $this->assertEquals($states[1], $this->object->getCurrentState());
    }

    /**
     * @covers FSM::reset
     */
    public function testReset()
    {
        $states = array(
            'S1',
            'S2'
        );
        
        $this->object->addStates($states);
        $this->object->addTransitionAny('S1', 'S2');
        $this->object->process();
        
        $this->assertEquals($states[1], $this->object->getCurrentState());
        $this->object->reset();
        $this->assertEquals($states[0], $this->object->getCurrentState());
    }

    /**
     * @covers FSM::addTransition
     */
    public function testAddTransition()
    {
        $initalTransitions = $this->object->getTransitions();
        
        $states = array(
            'S1',
            'S2'
        );
        
        $this->object->addStates($states);
        $this->object->addTransition('T_S1_S2', 'S1', 'S2', NULL);
        
        $this->assertNotEquals($initalTransitions, $this->object->getTransitions());
    }
    
    /**
     * @covers FSM::getStates
     */
    public function testGetStates()
    {
        $this->assertInternalType('array', $this->object->getStates());
        $this->assertEquals(array(), $this->object->getStates());
    }

    /**
     * @covers FSM::addTransitions
     */
    public function testAddTransitions()
    {
        $initalTransitions = $this->object->getTransitions();
        
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        
        $this->object->addStates($states);
        $this->object->addTransitions(array(
            'T_S1_S2',
            'T_S2_S3'
        ), 'S1', 'S3', NULL);
        
        $this->assertNotEquals($initalTransitions, $this->object->getTransitions());
    }

    /**
     * @covers FSM::addTransitionsArray
     */
    public function testAddTransitionsArray()
    {
        $initalTransitions = $this->object->getTransitions();
        
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        
        $this->object->addStates($states);
        $this->object->addTransitionsArray(array(
            array('T_S1_S2', 'S1', 'S2', NULL),
            array('T_S2_S3', 'S2', 'S3', NULL)
        ));
        
        $this->assertNotEquals($initalTransitions, $this->object->getTransitions());
    }

    /**
     * @covers FSM::addTransitionAny
     */
    public function testAddTransitionAny()
    {
        $initalTransitions = $this->object->getTransitionsAny();
        
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        
        $this->object->addStates($states);
        $this->object->addTransitionAny('S1', 'S2', NULL);
        
        $this->assertNotEquals($initalTransitions, $this->object->getTransitionsAny());
    }

    /**
     * @covers FSM::setDefaultTransition
     */
    public function testSetDefaultTransition()
    {
        $state = 'S1';
        $transition = 'test';
        
        $this->assertAttributeEquals(NULL, '_defaultTransition', $this->object);
        
        $this->object->addState($state);
        $this->object->setDefaultTransition($state, $transition);
        
        $this->assertAttributeEquals(array($state, $transition), '_defaultTransition', $this->object);
        
        $this->object->setDefaultTransition(NULL, $transition);
        $this->assertAttributeEquals(NULL, '_defaultTransition', $this->object);
    }

    /**
     * @covers FSM::getTransition
     */
    public function testGetTransition()
    {
        $state1 = 'S1';
        $state2 = 'S2';
        $state3 = 'S3';
        $callback = function($source, $target, $payload){};
        $transition = 'T_S1_S2';
        
        $this->assertEquals(NULL, $this->object->getTransition());
        
        $this->object->addState($state1);
        $this->object->setDefaultTransition($state1, $callback);
        $this->assertEquals(array($state1, $callback), $this->object->getTransition());
        
        $this->object->addState($state2);
        $this->object->addTransition($transition, $state1, $state2, NULL);
        $this->assertEquals(array($state2, NULL), $this->object->getTransition($transition));
        
        $this->object->addState($state3);
        $this->object->addTransitionAny($state2, $state3, NULL);
        $this->object->process($transition);
        
        $this->assertEquals(array($state3, NULL), $this->object->getTransition($transition));
    }

    /**
     * @covers FSM::getTransitions
     */
    public function testGetTransitions()
    {
        $this->assertInternalType('array', $this->object->getTransitions());
        $this->assertEquals(array(), $this->object->getTransitions());
    }

    /**
     * @covers FSM::getTransitionsAny
     */
    public function testGetTransitionsAny()
    {
        $this->assertInternalType('array', $this->object->getTransitionsAny());
        $this->assertEquals(array(), $this->object->getTransitionsAny());
    }

    /**
     * @covers FSM::process
     * @expectedException Exception
     */
    public function testProcess()
    {
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        $callback1 = function($source, $target, $payload){};
        $callback2 = function($source, $target, $payload){ return 'S3'; };
        
        $this->object->addStates($states);
        $this->object->addTransitionAny($states[0], $states[1], $callback1);
        $this->object->addTransitionAny($states[1], $states[2], $callback2);
        
        $this->assertEquals($states[0], $this->object->getCurrentState());
        
        $this->object->process();
        $this->assertEquals($states[1], $this->object->getCurrentState());
        
        $this->object->process();
        $this->assertEquals($states[2], $this->object->getCurrentState());
        
        $this->setExpectedException('Exception');
        
        $this->object->addState(NULL);
        $this->object->addTransitionAny(NULL, NULL, NULL);
        $this->object->process();
        $this->assertEquals($states[2], $this->object->getCurrentState());
    }

    /**
     * @covers FSM::processList
     */
    public function testProcessList()
    {
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        
        $this->object->addStates($states);
        $this->object->addTransitionAny($states[0], $states[1], NULL);
        $this->object->addTransitionAny($states[1], $states[2], NULL);
        
        $this->assertEquals($states[0], $this->object->getCurrentState());
        
        $this->object->processList(array(
            NULL,
            NULL
        ));
        $this->assertEquals($states[2], $this->object->getCurrentState());
    }
    
    /**
     * @covers FSM::export
     */
    public function testExport(){
        $filename = 'output/test.fsm';
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        
        $this->object->addStates($states);
        
        $this->assertFalse(file_exists($filename));
        $this->object->export($filename);
        $this->assertTrue(file_exists($filename));
        $this->assertNotEmpty(file_get_contents($filename));
        
        $finfo = finfo_open(FILEINFO_MIME);
        $this->assertContains('text/plain', finfo_file($finfo, $filename));
        finfo_close($finfo);
    }
    
    /**
     * @covers FSM::load
     * @expectedException
     */
    public function testLoad(){
        $filename = 'output/test.fsm';
        $states = array(
            'S1',
            'S2',
            'S3'
        );
        
        $this->assertTrue(file_exists($filename));
        $this->object->load($filename);
        $this->assertEquals($states, $this->object->getStates());
        
        unlink($filename);
        $this->assertFalse(file_exists($filename));
        
        $this->setExpectedException('Exception');
        $this->object->load($filename);
    }

    /**
     * @covers FSM::export2Dot
     */
    public function testExport2Dot()
    {
        $filename = 'output/test.dot';
        
        $this->assertFalse(file_exists($filename));
        
        $this->object->export2Dot($filename);
        $this->assertTrue(file_exists($filename));
        $this->assertNotEmpty(file_get_contents($filename));
        
        $finfo = finfo_open(FILEINFO_MIME);
        $this->assertContains('text/plain', finfo_file($finfo, $filename));
        finfo_close($finfo);
    }

    /**
     * @covers FSM::export2Png
     */
    public function testExport2Png()
    {
        $filename = 'output/test.png';
        
        $this->assertFalse(file_exists($filename));
        
        $this->object->export2Png($filename);
        $this->assertTrue(file_exists($filename));
        $this->assertNotEmpty(file_get_contents($filename));
        
        $finfo = finfo_open(FILEINFO_MIME);
        $this->assertContains('image/png', finfo_file($finfo, $filename));
        finfo_close($finfo);
    }
    
    /**
     * @covers FSM::export2Png
     */
    public function testExport2PngWatermark()
    {
        $filename = 'output/test2.png';
        
        $this->assertFalse(file_exists($filename));
        
        $this->object->export2Png($filename, 'images/test.png');
        $this->assertTrue(file_exists($filename));
        $this->assertNotEmpty(file_get_contents($filename));
        
        $finfo = finfo_open(FILEINFO_MIME);
        $this->assertContains('image/png', finfo_file($finfo, $filename));
        finfo_close($finfo);
    }
}